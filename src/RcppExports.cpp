// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/matchingR.h"
#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_wrapper_galeshapley
List cpp_wrapper_galeshapley(const umat& proposerPref, const mat& reviewerUtils);
RcppExport SEXP _matchingR_cpp_wrapper_galeshapley(SEXP proposerPrefSEXP, SEXP reviewerUtilsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const umat& >::type proposerPref(proposerPrefSEXP);
    Rcpp::traits::input_parameter< const mat& >::type reviewerUtils(reviewerUtilsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_wrapper_galeshapley(proposerPref, reviewerUtils));
    return rcpp_result_gen;
END_RCPP
}
// cpp_wrapper_galeshapley_check_stability
bool cpp_wrapper_galeshapley_check_stability(mat proposerUtils, mat reviewerUtils, umat proposals, umat engagements);
RcppExport SEXP _matchingR_cpp_wrapper_galeshapley_check_stability(SEXP proposerUtilsSEXP, SEXP reviewerUtilsSEXP, SEXP proposalsSEXP, SEXP engagementsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type proposerUtils(proposerUtilsSEXP);
    Rcpp::traits::input_parameter< mat >::type reviewerUtils(reviewerUtilsSEXP);
    Rcpp::traits::input_parameter< umat >::type proposals(proposalsSEXP);
    Rcpp::traits::input_parameter< umat >::type engagements(engagementsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_wrapper_galeshapley_check_stability(proposerUtils, reviewerUtils, proposals, engagements));
    return rcpp_result_gen;
END_RCPP
}
// cpp_wrapper_irving
uvec cpp_wrapper_irving(const umat pref);
RcppExport SEXP _matchingR_cpp_wrapper_irving(SEXP prefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const umat >::type pref(prefSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_wrapper_irving(pref));
    return rcpp_result_gen;
END_RCPP
}
// cpp_wrapper_irving_check_stability
bool cpp_wrapper_irving_check_stability(umat& pref, umat& matchings);
RcppExport SEXP _matchingR_cpp_wrapper_irving_check_stability(SEXP prefSEXP, SEXP matchingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat& >::type pref(prefSEXP);
    Rcpp::traits::input_parameter< umat& >::type matchings(matchingsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_wrapper_irving_check_stability(pref, matchings));
    return rcpp_result_gen;
END_RCPP
}
// cpp_wrapper_ttc
uvec cpp_wrapper_ttc(const umat pref);
RcppExport SEXP _matchingR_cpp_wrapper_ttc(SEXP prefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const umat >::type pref(prefSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_wrapper_ttc(pref));
    return rcpp_result_gen;
END_RCPP
}
// cpp_wrapper_ttc_check_stability
bool cpp_wrapper_ttc_check_stability(umat pref, uvec matchings);
RcppExport SEXP _matchingR_cpp_wrapper_ttc_check_stability(SEXP prefSEXP, SEXP matchingsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< umat >::type pref(prefSEXP);
    Rcpp::traits::input_parameter< uvec >::type matchings(matchingsSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_wrapper_ttc_check_stability(pref, matchings));
    return rcpp_result_gen;
END_RCPP
}
// sortIndex
umat sortIndex(const mat& u);
RcppExport SEXP _matchingR_sortIndex(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(sortIndex(u));
    return rcpp_result_gen;
END_RCPP
}
// sortIndexOneSided
umat sortIndexOneSided(const mat& u);
RcppExport SEXP _matchingR_sortIndexOneSided(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const mat& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(sortIndexOneSided(u));
    return rcpp_result_gen;
END_RCPP
}
// rankIndex
umat rankIndex(const umat& sortedIdx);
RcppExport SEXP _matchingR_rankIndex(SEXP sortedIdxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const umat& >::type sortedIdx(sortedIdxSEXP);
    rcpp_result_gen = Rcpp::wrap(rankIndex(sortedIdx));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_matchingR_cpp_wrapper_galeshapley", (DL_FUNC) &_matchingR_cpp_wrapper_galeshapley, 2},
    {"_matchingR_cpp_wrapper_galeshapley_check_stability", (DL_FUNC) &_matchingR_cpp_wrapper_galeshapley_check_stability, 4},
    {"_matchingR_cpp_wrapper_irving", (DL_FUNC) &_matchingR_cpp_wrapper_irving, 1},
    {"_matchingR_cpp_wrapper_irving_check_stability", (DL_FUNC) &_matchingR_cpp_wrapper_irving_check_stability, 2},
    {"_matchingR_cpp_wrapper_ttc", (DL_FUNC) &_matchingR_cpp_wrapper_ttc, 1},
    {"_matchingR_cpp_wrapper_ttc_check_stability", (DL_FUNC) &_matchingR_cpp_wrapper_ttc_check_stability, 2},
    {"_matchingR_sortIndex", (DL_FUNC) &_matchingR_sortIndex, 1},
    {"_matchingR_sortIndexOneSided", (DL_FUNC) &_matchingR_sortIndexOneSided, 1},
    {"_matchingR_rankIndex", (DL_FUNC) &_matchingR_rankIndex, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_matchingR(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
